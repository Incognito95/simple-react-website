{"ast":null,"code":"// Master DOManipulator v2 ------------------------------------------------------------\nconst items = document.querySelectorAll('.item'),\n  controls = document.querySelectorAll('.control'),\n  headerItems = document.querySelectorAll('.item-header'),\n  descriptionItems = document.querySelectorAll('.item-description'),\n  activeDelay = .76,\n  interval = 5000;\nlet current = 0;\nconst slider = {\n  init: () => {\n    controls.forEach(control => control.addEventListener('click', e => {\n      slider.clickedControl(e);\n    }));\n    const list = controls[current].classList.add('active');\n    if (list != undefined) {\n      controls[current].classList.add('active');\n    }\n    items[current].classList.add('active');\n  },\n  nextSlide: () => {\n    // Increment current slide and add active class\n    slider.reset();\n    if (current === items.length - 1) current = -1; // Check if current slide is last in array\n    current++;\n    controls[current].classList.add('active');\n    items[current].classList.add('active');\n    slider.transitionDelay(headerItems);\n    slider.transitionDelay(descriptionItems);\n  },\n  clickedControl: e => {\n    // Add active class to clicked control and corresponding slide\n    slider.reset();\n    clearInterval(intervalF);\n    const control = e.target,\n      dataIndex = Number(control.dataset.index);\n    control.classList.add('active');\n    items.forEach((item, index) => {\n      if (index === dataIndex) {\n        // Add active class to corresponding slide\n        item.classList.add('active');\n      }\n    });\n    current = dataIndex; // Update current slide\n    slider.transitionDelay(headerItems);\n    slider.transitionDelay(descriptionItems);\n    intervalF = setInterval(slider.nextSlide, interval); // Fire that bad boi back up\n  },\n\n  reset: () => {\n    // Remove active classes\n    items.forEach(item => item.classList.remove('active'));\n    controls.forEach(control => control.classList.remove('active'));\n  },\n  transitionDelay: items => {\n    // Set incrementing css transition-delay for .item-header & .item-description, .vertical-part, b elements\n    let seconds;\n    items.forEach(item => {\n      const children = item.childNodes; // .vertical-part(s)\n      let count = 1,\n        delay;\n      item.classList.value === 'item-header' ? seconds = .015 : seconds = .007;\n      children.forEach(child => {\n        // iterate through .vertical-part(s) and style b element\n        if (child.classList) {\n          item.parentNode.classList.contains('active') ? delay = count * seconds + activeDelay : delay = count * seconds;\n          child.firstElementChild.style.transitionDelay = `${delay}s`; // b element\n          count++;\n        }\n      });\n    });\n  }\n};\nlet intervalF = setInterval(slider.nextSlide, interval);\nslider.init();","map":{"version":3,"names":["items","document","querySelectorAll","controls","headerItems","descriptionItems","activeDelay","interval","current","slider","init","forEach","control","addEventListener","e","clickedControl","list","classList","add","undefined","nextSlide","reset","length","transitionDelay","clearInterval","intervalF","target","dataIndex","Number","dataset","index","item","setInterval","remove","seconds","children","childNodes","count","delay","value","child","parentNode","contains","firstElementChild","style"],"sources":["/Users/danielpedersen/Documents/simple-react-website/src/data/Slider.js"],"sourcesContent":["// Master DOManipulator v2 ------------------------------------------------------------\nconst items = document.querySelectorAll('.item'),\ncontrols = document.querySelectorAll('.control'),\nheaderItems = document.querySelectorAll('.item-header'),\ndescriptionItems = document.querySelectorAll('.item-description'),\nactiveDelay = .76,\ninterval = 5000;\n\nlet current = 0;\n\nconst slider = {\n  init: () => {\n    controls.forEach(control => control.addEventListener('click', e => {slider.clickedControl(e);}));\n    const list =controls[current].classList.add('active');\n    if (list != undefined) {\n        controls[current].classList.add('active');\n    }\n    items[current].classList.add('active');\n  },\n  nextSlide: () => {// Increment current slide and add active class\n    slider.reset();\n    if (current === items.length - 1) current = -1; // Check if current slide is last in array\n    current++;\n    controls[current].classList.add('active');\n    items[current].classList.add('active');\n    slider.transitionDelay(headerItems);\n    slider.transitionDelay(descriptionItems);\n  },\n  clickedControl: e => {// Add active class to clicked control and corresponding slide\n    slider.reset();\n    clearInterval(intervalF);\n\n    const control = e.target,\n    dataIndex = Number(control.dataset.index);\n\n    control.classList.add('active');\n    items.forEach((item, index) => {\n      if (index === dataIndex) {// Add active class to corresponding slide\n        item.classList.add('active');\n      }\n    });\n    current = dataIndex; // Update current slide\n    slider.transitionDelay(headerItems);\n    slider.transitionDelay(descriptionItems);\n    intervalF = setInterval(slider.nextSlide, interval); // Fire that bad boi back up\n  },\n  reset: () => {// Remove active classes\n    items.forEach(item => item.classList.remove('active'));\n    controls.forEach(control => control.classList.remove('active'));\n  },\n  transitionDelay: items => {// Set incrementing css transition-delay for .item-header & .item-description, .vertical-part, b elements\n    let seconds;\n\n    items.forEach(item => {\n      const children = item.childNodes; // .vertical-part(s)\n      let count = 1,\n      delay;\n\n      item.classList.value === 'item-header' ? seconds = .015 : seconds = .007;\n\n      children.forEach(child => {// iterate through .vertical-part(s) and style b element\n        if (child.classList) {\n          item.parentNode.classList.contains('active') ? delay = count * seconds + activeDelay : delay = count * seconds;\n          child.firstElementChild.style.transitionDelay = `${delay}s`; // b element\n          count++;\n        }\n      });\n    });\n  } };\n\n\nlet intervalF = setInterval(slider.nextSlide, interval);\nslider.init();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}