{"ast":null,"code":"// // Master DOManipulator v2 ------------------------------------------------------------\n// const items = document.querySelectorAll('.item'),\n// controls = document.querySelectorAll('.control'),\n// headerItems = document.querySelectorAll('.item-header'),\n// descriptionItems = document.querySelectorAll('.item-description'),\n// activeDelay = .76,\n// interval = 5000;\n\n// let current = 0;\n\n// const slider = {\n//   init: () => {\n//     controls.forEach(control => control.addEventListener('click', e => {slider.clickedControl(e);}));\n//     const list =controls[current].classList.add('active');\n//     if (list !== undefined) {\n//         controls[current].classList.add('active');\n//     }\n//     items[current].classList.add('active');\n//   },\n//   nextSlide: () => {// Increment current slide and add active class\n//     slider.reset();\n//     if (current === items.length - 1) current = -1; // Check if current slide is last in array\n//     current++;\n//     controls[current].classList.add('active');\n//     items[current].classList.add('active');\n//     slider.transitionDelay(headerItems);\n//     slider.transitionDelay(descriptionItems);\n//   },\n//   clickedControl: e => {// Add active class to clicked control and corresponding slide\n//     slider.reset();\n//     clearInterval(intervalF);\n\n//     const control = e.target,\n//     dataIndex = Number(control.dataset.index);\n\n//     control.classList.add('active');\n//     items.forEach((item, index) => {\n//       if (index === dataIndex) {// Add active class to corresponding slide\n//         item.classList.add('active');\n//       }\n//     });\n//     current = dataIndex; // Update current slide\n//     slider.transitionDelay(headerItems);\n//     slider.transitionDelay(descriptionItems);\n//     intervalF = setInterval(slider.nextSlide, interval); // Fire that bad boi back up\n//   },\n//   reset: () => {// Remove active classes\n//     items.forEach(item => item.classList.remove('active'));\n//     controls.forEach(control => control.classList.remove('active'));\n//   },\n//   transitionDelay: items => {// Set incrementing css transition-delay for .item-header & .item-description, .vertical-part, b elements\n//     let seconds;\n\n//     items.forEach(item => {\n//       const children = item.childNodes; // .vertical-part(s)\n//       let count = 1,\n//       delay;\n\n//       item.classList.value === 'item-header' ? seconds = .015 : seconds = .007;\n\n//       children.forEach(child => {// iterate through .vertical-part(s) and style b element\n//         if (child.classList) {\n//           item.parentNode.classList.contains('active') ? delay = count * seconds + activeDelay : delay = count * seconds;\n//           child.firstElementChild.style.transitionDelay = `${delay}s`; // b element\n//           count++;\n//         }\n//       });\n//     });\n//   } };\n\n// let intervalF = setInterval(slider.nextSlide, interval);\n// slider.init();","map":{"version":3,"names":[],"sources":["/Users/danielpedersen/Documents/simple-react-website/src/data/Slider.js"],"sourcesContent":["// // Master DOManipulator v2 ------------------------------------------------------------\n// const items = document.querySelectorAll('.item'),\n// controls = document.querySelectorAll('.control'),\n// headerItems = document.querySelectorAll('.item-header'),\n// descriptionItems = document.querySelectorAll('.item-description'),\n// activeDelay = .76,\n// interval = 5000;\n\n// let current = 0;\n\n// const slider = {\n//   init: () => {\n//     controls.forEach(control => control.addEventListener('click', e => {slider.clickedControl(e);}));\n//     const list =controls[current].classList.add('active');\n//     if (list !== undefined) {\n//         controls[current].classList.add('active');\n//     }\n//     items[current].classList.add('active');\n//   },\n//   nextSlide: () => {// Increment current slide and add active class\n//     slider.reset();\n//     if (current === items.length - 1) current = -1; // Check if current slide is last in array\n//     current++;\n//     controls[current].classList.add('active');\n//     items[current].classList.add('active');\n//     slider.transitionDelay(headerItems);\n//     slider.transitionDelay(descriptionItems);\n//   },\n//   clickedControl: e => {// Add active class to clicked control and corresponding slide\n//     slider.reset();\n//     clearInterval(intervalF);\n\n//     const control = e.target,\n//     dataIndex = Number(control.dataset.index);\n\n//     control.classList.add('active');\n//     items.forEach((item, index) => {\n//       if (index === dataIndex) {// Add active class to corresponding slide\n//         item.classList.add('active');\n//       }\n//     });\n//     current = dataIndex; // Update current slide\n//     slider.transitionDelay(headerItems);\n//     slider.transitionDelay(descriptionItems);\n//     intervalF = setInterval(slider.nextSlide, interval); // Fire that bad boi back up\n//   },\n//   reset: () => {// Remove active classes\n//     items.forEach(item => item.classList.remove('active'));\n//     controls.forEach(control => control.classList.remove('active'));\n//   },\n//   transitionDelay: items => {// Set incrementing css transition-delay for .item-header & .item-description, .vertical-part, b elements\n//     let seconds;\n\n//     items.forEach(item => {\n//       const children = item.childNodes; // .vertical-part(s)\n//       let count = 1,\n//       delay;\n\n//       item.classList.value === 'item-header' ? seconds = .015 : seconds = .007;\n\n//       children.forEach(child => {// iterate through .vertical-part(s) and style b element\n//         if (child.classList) {\n//           item.parentNode.classList.contains('active') ? delay = count * seconds + activeDelay : delay = count * seconds;\n//           child.firstElementChild.style.transitionDelay = `${delay}s`; // b element\n//           count++;\n//         }\n//       });\n//     });\n//   } };\n\n\n// let intervalF = setInterval(slider.nextSlide, interval);\n// slider.init();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}